<?php

namespace Tests\Feature;

use App\Domain\Actions\NPC\FindChestsToOpen;
use App\Domain\Behaviors\MobileStorageRank\WagonBehavior;
use App\Factories\Models\ChestFactory;
use App\Factories\Models\SquadFactory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Collection;
use Tests\TestCase;

class FindChestsToOpenTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * @return FindChestsToOpen
     */
    protected function getDomainAction()
    {
        return app(FindChestsToOpen::class);
    }

    /**
     * @test
     */
    public function it_will_return_a_collection_unopened_chests_belonging_to_a_squad()
    {
        $squad = SquadFactory::new()->create();
        $chestFactory = ChestFactory::new()->withSquadID($squad->id);
        $count = rand(2,5);
        $chestsTopOpen = collect();
        for ($i = 1; $i <= $count; $i++) {
            $chestsTopOpen->push($chestFactory->create());
        }

        $chests = $this->getDomainAction()->execute($squad);

        $this->assertEquals($count, $chests->count());
        $this->assertArrayElementsEqual($chestsTopOpen->pluck('id')->toArray(), $chests->pluck('id')->toArray());
    }

    /**
     * @test
     */
    public function it_will_return_an_empty_collection_if_no_unopened_chests_available()
    {
        $squad = SquadFactory::new()->create();
        $chestFactory = ChestFactory::new()->withSquadID($squad->id)->opened();
        $count = rand(2,5);
        $chestsTopOpen = collect();
        for ($i = 1; $i <= $count; $i++) {
            $chestsTopOpen->push($chestFactory->create());
        }

        $chests = $this->getDomainAction()->execute($squad);

        $this->assertTrue($chests->isEmpty());
    }

    /**
     * @test
     */
    public function it_will_limit_the_amount_of_chests_to_open_based_on_squads_mobile_storage_capacity()
    {
        $squad = SquadFactory::new()->create();
        $chestFactory = ChestFactory::new()->withSquadID($squad->id);

        // Create 3 chests, but only 2 should be returned
        for ($i = 1; $i <= 3; $i++) {
            $chestFactory->create();
        }

        // Mock capacity so only 2 chests will be opened
        $capacityMock = FindChestsToOpen::CAPACITY_PER_CHEST + 1;
        $wagonBehaviorMock = \Mockery::mock(WagonBehavior::class)
            ->shouldReceive('getWeightCapacity')
            ->andReturn($capacityMock)
            ->getMock();
        $this->app->instance(WagonBehavior::class, $wagonBehaviorMock);

        $chests = $this->getDomainAction()->execute($squad);
        $this->assertEquals(2, $chests->count());
    }
}
